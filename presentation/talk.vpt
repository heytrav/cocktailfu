=title   {{DBIx::Class}}



=break


=section #. Idea for an app

A Cocktail Recipe Database

=autopause


* Example:

    title: 'Zombie #1'
    - ingredients:
        - 1 1/4 oz Lemon juice
        - 2 dashes Grenadine
        - 3/4 oz blood Orange juice
        - 3/4 oz Cherry Heering
        - 3/4 oz White rum
        - 2 oz Dark rum
        - 3/4 oz dark 151 proof rum
    instructions: 'Shake over ice in a shaker,
                  and strain into a large highball 
                  glass over crushed ice.'

* {{beverage}} will have {{recipe}} consisting of set of
  {{ingredients}} with {{measurement}} and quantity. 


Database Schema

=animation
                      
                      
 +--------------+
 | beverages    |
 |--------------|
 | beverage_id  |
 | name         |
 | description  |
 |              |
 +--------------+


=animation

                      
 +--------------+
 | beverages    |
 |--------------|
 | beverage_id  |
 | name         |
 | description  |
 |              |
 +--------------+
       |         
       |                                       
       1                                       
 +-------------+
 | instructions|
 |-------------|
 | id          |
 | beverage_id |
 | instruction |
 +-------------+
                

=animation

                      
 +--------------+                                  
 | beverages    |                                  +---------------+
 |--------------|                                  | ingredients   |
 | beverage_id  |                                  |---------------|
 | name         |                                  | ingredient_id |
 | description  |                                  | name          |
 |              |                                  | description   |
 +--------------+                                  +---------------+
       |                                           
       |                                       
       1                                       
 +-------------+                               
 | instructions|                               
 |-------------|                               
 | id          |                               
 | beverage_id |                               
 | instruction |
 +-------------+      
                      

=animation
                      
 +--------------+                                  
 | beverages    |                                  +---------------+
 |--------------|                                  | ingredients   |
 | beverage_id  |                                  |---------------|
 | name         |                                  | ingredient_id |
 | description  |                                  | name          |
 |              |                                  | description   |
 +--------------+                                  +---------------+
       |                                           
       |                   +----------------+  
       1                   | measurements   |  
 +-------------+           |----------------|  
 | instructions|           | measurement_id |  
 |-------------|           | name           |  
 | id          |           | unit           |  
 | beverage_id |           +----------------+  
 | instruction |
 +-------------+      
                      

=animation
 +--------------+         +-----------------+      
 | beverages    |         | recipes         |      +---------------+
 |--------------|         |-----------------|      | ingredients   |
 | beverage_id  |--------<| beverage_id     |      |---------------|
 | name         |         | ingredient_id   |>-----| ingredient_id |
 | description  |    +---<| measurement_id  |      | name          |
 |              |    |    | quantity        |      | description   |
 +--------------+    |    +-----------------+      +---------------+
       |             |   
       |             |     +----------------+  
       1             |     | measurements   |  
 +-------------+     |     |----------------|  
 | instructions|     +-----| measurement_id |  
 |-------------|           | name           |  
 | id          |           | unit           |  
 | beverage_id |           +----------------+  
 | instruction |
 +-------------+      
                      
                      

=section #. Setting up {{DBIx::Class}}



Defining table relations

=autopause
* Modules (i.e. {{.pm}} files) represent {{table}} definitions

 package CocktailFu::Schema::Result::Beverage;

 use Moose;
 use namespace::autoclean;
 BEGIN { extends 'DBIx::Class::Core' }

 __PACKAGE__->table('**beverages**');
 __PACKAGE__->add_columns(qw/**beverage_id name description**/);
 __PACKAGE__->set_primary_key('**beverage_id**');
 __PACKAGE__->add_unique_constraint([qw/**name**/]);

=break

 package CocktailFu::Schema::Result::Recipe;

 use Moose;
 use namespace::autoclean;
 BEGIN { extends 'DBIx::Class::Core' }

 __PACKAGE__->table('**recipes**');
 __PACKAGE__->add_columns(
    qw/**beverage_id ingredient_id measurement_id quantity**/);
 __PACKAGE__->add_unique_constraint([qw/**beverage_id ingredient_id**/]);

 __PACKAGE__->set_primary_key(qw/**beverage_id ingredient_id**/);


=break


 package CocktailFu::Schema::Result::Ingredient;

 use Moose;
 use namespace::autoclean;
 BEGIN { extends 'DBIx::Class::Core' }

 __PACKAGE__->table('**ingredients**');
 __PACKAGE__->add_columns(qw/**ingredient_id name description**/);
 __PACKAGE__->set_primary_key('**ingredient_id'**);
 __PACKAGE__->add_unique_constraint([qw/**name**/]);




=section #. Modeling relationships between tables


The {{has_one}} relationship

=autopause

* **Other** table has primary key of **this** table in one of its
     columns

    **has_one**                   +--------------+      
 +----------------+           | instructions |      
 | beverages      |           |--------------|      
 |----------------|           | id           |      
 | **beverage_id**    |----------1| **beverage_id**  |
 | name           |           | instruction  |      
 | description    |           +--------------+      
 |                |         
 +----------------+         


* Use {{has_one}} when there is 1:1 relation between two tables.


=break

 package CocktailFu::Schema::Result::Beverage;
 #..
 __PACKAGE__->**has_one**(
        instruction => Instruction => 
            { 'foreign.beverage_id' => 'self.beverage_id' } 
       );



The {{has_many}} relationship

=autopause

* Use {{has_many}} when foreign table has current 
  table's primary key.

* beverages {{has_many}} recipes

* ingredients {{has_many}} recipes

* measurements {{has_many}} recipes

  **has_many**          
 +--------------+         +-----------------+        **has_many** 
 | beverages    |         | recipes         |      +---------------+
 |--------------|         |-----------------|      | ingredients   |
 | beverage_id  |--------<| beverage_id     |      |---------------|
 | name         |         | ingredient_id   |>-----| ingredient_id |
 | description  |         | measurement_id  |      | name          |
 |              |         | quantity        |      | description   |
 +--------------+         +-----------------+      +---------------+
                         
                          

=break


 package CocktailFu::Schema::Result::Beverage;
 ...
 __PACKAGE__->**has_many**(
     recipes => 'Recipe' => { 
         'foreign.beverage' => 'self.id' } );

 package CocktailFu::Schema::Result::Ingredient;
 ...
 __PACKAGE__->**has_many**(
     recipes => Recipe => {
     'foreign.ingredient' => 'self.id' } );


 package CocktailFu::Schema::Result::Measurement;
 ...
 __PACKAGE__->**has_many**(
         recipes => Recipe => {
         'foreign.measurement' => 'self.id' } );


The {{belongs_to}} relationship

=autopause

* Use {{belongs_to}} to reference foreign key table.
* recipes {{belongs_to}} beverages, ingredients, measurements

                           **belongs_to**
 +--------------+         +-----------------+      
 | beverages    |         | recipes         |      +---------------+
 |--------------|         |-----------------|      | ingredients   |
 | beverage_id  |--------<| beverage_id     |      |---------------|
 | name         |         | ingredient_id   |>-----| ingredient_id |
 | description  |         | measurement_id  |      | name          |
 |              |         | quantity        |      | description   |
 +--------------+         +-----------------+      +---------------+
                          


=break
 package CocktailFu::Schema::Result::Recipe;
 #..
 __PACKAGE__->**belongs_to**(
     beverage => Beverage => 
     { 'foreign.id' => 'self.beverage' } );

 __PACKAGE__->**belongs_to**(
     ingredient => 'CocktailFu::Schema::Result::Ingredient' 
     => { 'foreign.id' => 'self.ingredient' } );

 __PACKAGE__->**belongs_to**(
     measurement 
         => 'CocktailFu::Schema::Result::Measurement' 
         => { 'foreign.id' => 'self.measurement' } );


The {{many_to_many}} relationship

*  combines {{has_many}} and {{belongs_to}}

    
         _________________**many_to_many**____________
        /                                          \
 +--------------+         +-----------------+       \  
 | beverages    |         | recipes         |      +---------------+
 |--------------|         |-----------------|      | ingredients   |
 | beverage_id  |--------<| beverage_id     |      |---------------|
 | name         |         | ingredient_id   |>-----| ingredient_id |
 | description  |         | measurement_id  |      | name          |
 |              |         | quantity        |      | description   |
 +--------------+         +-----------------+      +---------------+
                          

=break

 package CocktailFu::Schema::Result::Beverage;
 #..

 __PACKAGE__->**many_to_many**( ingredients => recipes => 'ingredient' );


=section  #. Using the DBIC model


Get at the data in the model

=autopause

* Initialise the model

 my $dbic = CocktailFu::Schema->connect($dsn,$user,$password);

* Get reference to a {{ResultSet}} (i.e. {{table}})

 my $beverages_rs = $dbic->resultset('Beverage');

* Search table

 my $subset_rs = $beverage_rs->search(
        {description => {ilike => '%Martini%'}});

* Search that {{ResultSet}}  

 my $vespers_martini = $subset_rs->find({name => 'vespers-martini'});


Usual CRUD

=autopause

* Create a row

 my $beverage = $dbic->resultset('Beverage')->create(
     {
         name        => 'mojito',
         description => 'Mojito'
     }
 );

* Update a row

 $beverage->description('B-52');
 $beverage->update;

* Delete

 $beverage->delete;


=section #. Using the DBIC relationships

ResultSet level

=autopause

* Return {{ResultSet}} objects representing sets of rows

*  {{has_many}} relations

 my $recipes = $beverage->recipes; 

 while (my $recipe = $recipes->next){
    say $recipe->ingredient->description;
    say $recipe->measurement->unit;
 }

* {{many_to_many}}

 my $ingredients = $beverage->**ingredients**;

 while (my $ingredient = $ingredients->next) {
    say $ingredient->description;
 }



Row level queries

=autopause

* Return object that represents a {{row}} in the db.

* {{has_one}}, {{belongs_to}} 


 my $ingredient = $recipe->ingredient;
 say $ingredient->description;



=section #. Back to the app


Inserting the data

=autopause

* Sample data:

    title: 'Vesper Martini'
    - ingredients:
        - 3 cl Gordon's Gin
        - 1 cl Vodka
        - 1/2 cl Kina Lillet
        - 1 Lemon Peel
    instructions: 'Shaken, not stirred'


* Insert {{beverage}}

 my $beverage = $dbic->resultset('Beverage')->create(
     { 
        name => 'vesper-martini', 
        description => 'Vesper Martini', 
     }
 );

=break

* Insert {{instruction }} 

 my $instruction = $dbic->resultset('Instruction')->create(
    { 
        beverage_id => $beverage->id,
        instruction => 'Shaken, not stirred...' 
    }
 );
 
=break

* or, insert beverage and instruction using {{has_one}}

 my $beverage = $beverage_rs->create(
     {
         name        => 'vesper-martini',
         description => 'Vesper Martini',
         'instruction.instruction' => 'Shaken, not stirred...'
     },
     { join => 'instruction' }
 );

=pause

* Equivalent SQL:

    INSERT INTO beverages ( name, description) 
    VALUES ( 'vesper-martini', 'Vesper Martini' ) RETURNING id

    INSERT INTO instructions ( beverage_id, instruction) 
    VALUES ( 2431, 'Shaken, not stirred...' ) RETURNING id


Create a row in {{recipes}}

* Insert {{ingredient}}

 my $ingredient = $dbic->resultset('Ingredient')->create(
     { name  => 'gordons-gin', description => q{Gordon's Gin} }
 );

* Insert {{measurement}}

 my $measurement = $dbic->resultset('Measurement')
    ->create( { unit => 'cl' } );

* Insert {{recipe}} using above

 my $recipe = $dbic->resultset('Recipe')->create(
     {
         beverage    => $beverage->id,
         ingredient  => $ingredient->id,
         measurement => $measurement->id,
         quantity    => '1' });


=break


* Alternatively, do everything at once

 my $recipe = $beverage->**add_to_recipes**(
     {
         ingredient => {
             name        => 'gordons-gin',
             description => q{Gordon's Gin}
         },
         measurement => { unit => 'cl' },
         quantity    => 3
     },
     { join => { recipes => [qw/ingredient measurement/] } }
 );

* {{has_many}} relation creates implicit add_to_{{relationship}}

* {{ingredient}}, {{measurement}} created if they do not exist
  and used to create new recipe with correct {{beverage}}.
