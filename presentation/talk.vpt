=title   {{DBIx::Class}} 
       by example


=presenter Travis Holton
=duration 45 minutes        



=break


Instructive demo...need data


=autopause

* >6000 cocktail recipes scraped years ago (thanks 
  "Spidering Hacks"; O'Reilly, 2003)

* Example:

    title: 'Zombie #1'
    - ingredients:
        - 1 1/4 oz Lemon juice
        - 2 dashes Grenadine
        - 3/4 oz blood Orange juice
        - 3/4 oz Cherry Heering
        - 3/4 oz White rum
        - 2 oz Dark rum
        - 3/4 oz dark 151 proof rum
    instructions: 'Shake over ice in a shaker,
                  and strain into a large highball 
                  glass over crushed ice.'



=section #. Modeling A Cocktail Recipe Database


Database Schema

=animation
* {{beverage}} has a description and name abbreviated for url

 +--------------+
 | beverages    |
 |--------------|
 | beverage_id  |
 | name         |
 | description  |
 +--------------+


=animation
* {{beverage}} has one instruction, e.g. {{Shaken, not stirred..}}
                      
 +--------------+
 | beverages    |
 |--------------|
 | beverage_id  |
 | name         |
 | description  |
 +--------------+
       |         
       |                                       
       1                                       
 +-------------+
 | instructions|
 |-------------|
 | id          |
 | beverage_id |
 | instruction |
 +-------------+
                

=animation
* {{ingredients}} include: {{Rum, Vodka, Bacardi, OJ, salt}}, etc (unique)
                      
 +--------------+                                  
 | beverages    |                                  +---------------+
 |--------------|                                  | ingredients   |
 | beverage_id  |                                  |---------------|
 | name         |                                  | ingredient_id |
 | description  |                                  | name          |
 +--------------+                                  | description   |
       |                                           +---------------+
       |                                           
       1                                       
 +-------------+                               
 | instructions|                               
 |-------------|                               
 | id          |                               
 | beverage_id |                               
 | instruction |
 +-------------+      
                      

=animation
* {{measurements}} include: {{cl, oz, tsp, g, pinch, dash}}, etc. (unique)
                      
 +--------------+                                  
 | beverages    |                                  +---------------+
 |--------------|                                  | ingredients   |
 | beverage_id  |                                  |---------------|
 | name         |                                  | ingredient_id |
 | description  |                                  | name          |
 +--------------+                                  | description   |
       |                                           +---------------+
       |                   +----------------+  
       1                   | measurements   |  
 +-------------+           |----------------|  
 | instructions|           | measurement_id |  
 |-------------|           | name           |  
 | id          |           | unit           |  
 | beverage_id |           +----------------+  
 | instruction |
 +-------------+      
                                                  
                      

=animation
* {{ingredients}}, {{measurements}} combined into a {{recipe}}

 +--------------+         +-----------------+      
 | beverages    |         | recipes         |      +---------------+
 |--------------|         |-----------------|      | ingredients   |
 | beverage_id  |--------<| beverage_id     |      |---------------|
 | name         |         | ingredient_id   |>-----| ingredient_id |
 | description  |    +---<| measurement_id  |      | name          |
 +--------------+    |    | quantity        |      | description   |
       |             |    +-----------------+      +---------------+
       |             |     +----------------+  
       1             |     | measurements   |  
 +-------------+     |     |----------------|  
 | instructions|     +-----| measurement_id |  
 |-------------|           | name           |  
 | id          |           | unit           |  
 | beverage_id |           +----------------+  
 | instruction |
 +-------------+      
                      
                      

=section #. Setting up {{DBIx::Class}}


Setup the model

=autopause


* example class structure


    ├── Schema.pm
    ├── Schema
    │   ├── Result
    │   │   ├── Beverage.pm
    │   │   ├── Ingredient.pm
    │   │   ├── Instruction.pm
    │   │   ├── Measurement.pm
    │   │   └── Recipe.pm
    │   └── ResultSet
    │       └── Beverage.pm
    ├── SqlProfiler.pm



=break

* Define a class to represent the {{model}}


    ├── **Schema.pm**
    ├── Schema
    │   ├── Result
    │   │   ├── Beverage.pm
    │   │   ├── Ingredient.pm
    │   │   ├── Instruction.pm
    │   │   ├── Measurement.pm
    │   │   └── Recipe.pm
    │   └── ResultSet
    │       └── Beverage.pm
    ├── SqlProfiler.pm



=break



* Define a class to represent the {{model}}
 
 package CocktailFu::Schema;

 use Moose;
 use namespace::autoclean;
 BEGIN { extends 'DBIx::Class::Schema' }

 __PACKAGE__->load_namespaces();
 __PACKAGE__->meta->make_immutable( inline_constructor => 0 );

 1;


* Instance represents {{database}}

 my $model = CocktailFu::Schema->connect($dsn, $user, $password);



Defining table relations


* Create modules that correspond to {{tables}}

    ├── Schema.pm
    ├── Schema
    │   ├── Result
    │   │   ├── **Beverage.pm**
    │   │   ├── **Ingredient.pm**
    │   │   ├── **Instruction.pm**
    │   │   ├── **Measurement.pm**
    │   │   └── **Recipe.pm**
    │   └── ResultSet
    │       └── Beverage.pm
    ├── SqlProfiler.pm



=break


* Model for {{beverages}}

 package CocktailFu::Schema::Result::Beverage;

 use Moose;
 use namespace::autoclean;
 BEGIN { extends 'DBIx::Class::Core' }

 __PACKAGE__->table('**beverages**');
 __PACKAGE__->add_columns(qw/**beverage_id name description**/);
 __PACKAGE__->set_primary_key('**beverage_id**');
 __PACKAGE__->add_unique_constraint([qw/**name**/]);


=break


* Model for {{recipes}}

 package CocktailFu::Schema::Result::Recipe;

 use Moose;
 use namespace::autoclean;
 BEGIN { extends 'DBIx::Class::Core' }

 __PACKAGE__->table('**recipes**');
 __PACKAGE__->add_columns(
    qw/**beverage_id ingredient_id measurement_id quantity**/);
 __PACKAGE__->add_unique_constraint([qw/**beverage_id ingredient_id**/]);

 __PACKAGE__->set_primary_key(qw/**beverage_id ingredient_id**/);


=break


* Model for {{ingredients}}

 package CocktailFu::Schema::Result::Ingredient;

 use Moose;
 use namespace::autoclean;
 BEGIN { extends 'DBIx::Class::Core' }

 __PACKAGE__->table('**ingredients**');
 __PACKAGE__->add_columns(qw/**ingredient_id name description**/);
 __PACKAGE__->set_primary_key('**ingredient_id'**);
 __PACKAGE__->add_unique_constraint([qw/**name**/]);

* {{instructions}} and {{measurements}} similar



=section  #. Using the DBIC model



Get at the data in the model


=autopause

* Initialise the model

 my $dbic = CocktailFu::Schema->connect($dsn,$user,$password);

* Get reference to a {{ResultSet}} (i.e. {{table}})

 my $beverages_rs = $dbic->resultset('Beverage');

* Search table

 my $subset_rs = $beverage_rs->search(
        {description => {ilike => '%Martini%'}});

* Search the result of previous search

 my $vespers_martini = $subset_rs->find({name => 'vespers-martini'});
 say $vespers_martini->beverage_id; # e.g. "243"



Searching the db: ResultSets vs Rows


=autopause


* Basic {{search}}
 
 my $rs = $dbic->resultset('Ingredient')->search(
  { description => 'Orange Juice' }
 );

* {{DBIx::Class::ResultSet}}: Set of 0 or more rows from a search

* Can iterate over using {{next}}

  while (my $ingredient = $rs->**next**) { ..  }

* Can get rows as array using {{all}}

 my @ingredients = $rs->**all**;
 foreach my $ingredient (@ingredients){..}


=break


* Retrieve unique records with {{find}}

  my $ingredient = $ingredient_rs->find(27);
  my $other_ingredient = $ingredient_rs->find(
    {name => 'rum-and-coke'});

* Use wth primary key and unique constraint columns
  to return {{row}} objects

 say $ingredient->description; # 'Rum and Coke'




Usual CRUD

=autopause

* Create a row

 my $beverage = $dbic->resultset('Beverage')->create(
     {
         name        => 'mojito',
         description => 'Mojito'
     }
 );

* Update a row
    
 $beverage->update({name => 'b-52', description => 'B-52'});

* Delete

 $beverage->delete;



=section #. Modeling relationships between tables


Main types of relationships to model


* has_one

* belongs_to

* has_many

* many_to_many

* {{might_have}}

=pause


* Represent foreign key relations in db

* make it possible to traverse relations in data




The {{has_one}} relationship

=autopause

* **Other** table has primary key of **this** table in one of its
  columns

    **has_one**                   +--------------+      
 +----------------+           | instructions |      
 | beverages      |           |--------------|      
 |----------------|           | id           |      
 | **beverage_id**    |----------1| **beverage_id**  |
 | name           |           | instruction  |      
 | description    |           +--------------+      
 |                |         
 +----------------+         

* Use {{has_one}} when there is 1:1 relation between two tables.


=break

 package CocktailFu::Schema::Result::Beverage;
 #..
 __PACKAGE__->**has_one**(
        **instruction** => Instruction => 
            { 'foreign.beverage_id' => 'self.beverage_id' } 
       );


The {{belongs_to}} relationship


=autopause

* Use {{belongs_to}} to reference foreign key table.

* recipes {{belongs_to}} beverages, ingredients, measurements

                           **belongs_to**
 +--------------+         +-----------------+      
 | beverages    |         | recipes         |      +---------------+
 |--------------|         |-----------------|      | ingredients   |
 | beverage_id  |--------<| beverage_id     |      |---------------|
 | name         |         | ingredient_id   |>-----| ingredient_id |
 | description  |         | measurement_id  |      | name          |
 |              |         | quantity        |      | description   |
 +--------------+         +-----------------+      +---------------+
                          


=break
 package CocktailFu::Schema::Result::Recipe;
 #..
 __PACKAGE__->**belongs_to**(
     **beverage** => Beverage => 
     { 'foreign.beverage_id' => 'self.beverage_id' } );

 __PACKAGE__->**belongs_to**(
     **ingredient** => 'CocktailFu::Schema::Result::Ingredient' 
     => { 'foreign.ingredient_id' => 'self.ingredient_id' } );

 __PACKAGE__->**belongs_to**(
     **measurement** 
         => 'CocktailFu::Schema::Result::Measurement' 
         => { 'foreign.measurement_id' => 'self.measurement_id' } );





Using {{has_one}} and {{belongs_to}}

=autopause

* Return object that represents a {{row}} in the db.


 my $ingredient = $recipe->ingredient;
 say $ingredient->description;




The {{has_many}} relationship

=autopause

* Use {{has_many}} when foreign table has current 
  table's primary key.

  **has_many**          
 +--------------+         +-----------------+        **has_many** 
 | beverages    |         | recipes         |      +---------------+
 |--------------|         |-----------------|      | ingredients   |
 | beverage_id  |--------<| beverage_id     |      |---------------|
 | name         |         | ingredient_id   |>-----| ingredient_id |
 | description  |         | measurement_id  |      | name          |
 |              |         | quantity        |      | description   |
 +--------------+         +-----------------+      +---------------+


* beverages {{has_many}} recipes

* ingredients {{has_many}} recipes

* measurements {{has_many}} recipes
                         

=break


 package CocktailFu::Schema::Result::Beverage;
 ...
 __PACKAGE__->**has_many**(
     **recipes** => 'Recipe' => { 
         'foreign.beverage_id' => 'self.beverage_id' } );

 package CocktailFu::Schema::Result::Ingredient;
 ...
 __PACKAGE__->**has_many**(
     **recipes** => Recipe => {
     'foreign.ingredient_id' => 'self.ingredient_id' } );


 package CocktailFu::Schema::Result::Measurement;
 ...
 __PACKAGE__->**has_many**(
         **recipes** => Recipe => {
         'foreign.measurement_id' => 'self.measurement_id' } );

=break


 my $recipes = $beverage->**recipes**; 

 while (my $recipe = $recipes->next){
    say $recipe->ingredient->description;
    say $recipe->measurement->unit;
 }



The {{many_to_many}} relationship

*  combines {{has_many}} and {{belongs_to}}

    
         _________________**many_to_many**____________
        /                                          \
       /       --has_many->          --belongs_to-> \
 +--------------+         +-----------------+        \  
 | beverages    |         | recipes         |      +---------------+
 |--------------|         |-----------------|      | ingredients   |
 | beverage_id  |--------<| beverage_id     |      |---------------|
 | name         |         | ingredient_id   |>-----| ingredient_id |
 | description  |         | measurement_id  |      | name          |
 |              |         | quantity        |      | description   |
 +--------------+         +-----------------+      +---------------+
                          


=break

 package CocktailFu::Schema::Result::Beverage;
 #..

 __PACKAGE__->**many_to_many**( **ingredients** 
    => recipes => 'ingredient' );



 my $ingredients = $beverage->**ingredients**;

 while (my $ingredient = $ingredients->next) {
    say $ingredient->description;
 }


* Both return {{ResultSet}} objects representing sets of rows





=section #. More Data Manipulation


Inserting the data

=autopause

* Sample data:

    title: 'Vesper Martini'
    - ingredients:
        - 3 cl Gordon's Gin
        - 1 cl Vodka
        - 1/2 cl Kina Lillet
        - 1 Lemon Peel
    instructions: 'Shaken, not stirred'

=break

* Insert {{beverage}}

 my $beverage = $dbic->resultset('Beverage')->create(
     { 
        name => 'vesper-martini', 
        description => 'Vesper Martini', 
     }
 );


* Insert {{instruction }} 

 my $instruction = $dbic->resultset('Instruction')->create(
    { 
        beverage_id => $beverage->beverage_id,
        instruction => 'Shaken, not stirred...' 
    }
 );
 
=break

* or use {{has_one}} to insert beverage and instruction in one go

 my $beverage = $beverage_rs->create(
     {
         name        => 'vesper-martini',
         description => 'Vesper Martini',
         instruction => { 
            instruction => 'Shaken, not stirred..' 
         }
     },
     { join => 'instruction' }
 );

=pause

* Equivalent SQL:

    INSERT INTO beverages ( name, description) 
    VALUES ( 'vesper-martini', 'Vesper Martini' ) RETURNING id

    INSERT INTO instructions ( beverage_id, instruction) 
    VALUES ( 2431, 'Shaken, not stirred...' ) RETURNING id


Create a row in {{recipes}}

=autopause

* Insert {{ingredient}}

 my $ingredient = $dbic->resultset('Ingredient')->create(
     { name  => 'gordons-gin', description => q{Gordon's Gin} }
 );

* Insert {{measurement}}

 my $measurement = $dbic->resultset('Measurement')
    ->create( { unit => 'cl' } );

* Insert {{recipe}} using {{beverage}}, {{ingredient}} & {{measurement}}

 my $recipe = $dbic->resultset('Recipe')->create(
     {
         beverage    => $beverage->beverage_id,
         ingredient  => $ingredient->ingredient_id,
         measurement => $measurement->measurement_id,
         quantity    => '1' });


=break

=autopause

* {{has_many}} relation creates implicit add_to_{{relationship}}

* Insert everything at once

 my $recipe = $beverage->**add_to_recipes**(
     {
         ingredient => {
             name        => 'gordons-gin',
             description => q{Gordon's Gin}
         },
         measurement => { unit => 'cl' },
         quantity    => 3
     },
     { join => { recipes => [qw/ingredient measurement/] } }
 );


* {{ingredient}}, {{measurement}} created if they do not exist
  and used to create new recipe with correct {{beverage}}.



=section #. Retrieving data


The {{stupid ORM makes too many queries!}} problem

=autopause

* What happens when code does this?

 my $beverage_rs = $dbic->resultset('Beverage');
 my $beverage = $beverage_rs->find({name => 'vespers-martini'});
 my $recipes = $beverage->recipes;
 while (my $recipe = $recipes->next) {
    my $ingredient = $recipes->ingredient->description;
    my $measurement = $recipes->measurement->unit;
 }

=example


 Executing:
 SELECT
     me.id,
     me.name,
     me.description 
 FROM
     beverages me 
 WHERE
     ( me.name = ? )
 Parameters:	'vesper'
 Execution took 0.0025 seconds.
 ------------------------------------------------------------------------------

 Executing:
 SELECT
     me.beverage,
     me.ingredient,
     me.measurement,
     me.quantity 
 FROM
     recipes me 
 WHERE
     ( me.beverage = ? )
 Parameters:	'5878'
 Execution took 0.0008 seconds.
 ------------------------------------------------------------------------------

 Executing:
 SELECT
     me.id,
     me.name,
     me.description 
 FROM
     ingredients me 
 WHERE
     ( me.id = ? )
 Parameters:	'20'
 Execution took 0.0006 seconds.
 ------------------------------------------------------------------------------

 Executing:
 SELECT
     me.id,
     me.name,
     me.unit 
 FROM
     measurements me 
 WHERE
     ( me.id = ? )
 Parameters:	'3'
 Execution took 0.0006 seconds.
 ------------------------------------------------------------------------------

 Executing:
 SELECT
     me.id,
     me.name,
     me.description 
 FROM
     ingredients me 
 WHERE
     ( me.id = ? )
 Parameters:	'356'
 Execution took 0.0002 seconds.
 ------------------------------------------------------------------------------

 Executing:
 SELECT
     me.id,
     me.name,
     me.unit 
 FROM
     measurements me 
 WHERE
     ( me.id = ? )
 Parameters:	'3'
 Execution took 0.0002 seconds.
 ------------------------------------------------------------------------------

 Executing:
 SELECT
     me.id,
     me.name,
     me.description 
 FROM
     ingredients me 
 WHERE
     ( me.id = ? )
 Parameters:	'1715'
 Execution took 0.0002 seconds.
 ------------------------------------------------------------------------------

 Executing:
 SELECT
     me.id,
     me.name,
     me.unit 
 FROM
     measurements me 
 WHERE
     ( me.id = ? )
 Parameters:	'3'
 Execution took 0.0002 seconds.
 ------------------------------------------------------------------------------

 Executing:
 SELECT
     me.id,
     me.beverage,
     me.instruction 
 FROM
     instructions me 
 WHERE
     ( me.beverage = ? )
 Parameters:	'5878'
 Execution took 0.0015 seconds.
 ----------------------------------------------------------------------------

* 9 queries total: 1 for beverage, 1 for instruction, 
  1 for recipe, 3 for ingredients, 3 for measurement

* Naïve execution--not ideal!



Same thing using {{prefetch}}


=autopause

* What happens when code does this?

 my $beverage_rs = $dbic->resultset('Beverage')->search(
        {},
        {
            **prefetch => ['instruction',{recipes => 'ingredient'}]**
        }
    );
 my $beverage = $beverage_rs->find({name => 'vespers-martini'});
 my $recipes = $beverage->recipes;
 while (my $recipe = $recipes->next) {
    my $ingredient = $recipes->ingredient->description;
    my $measurement = $recipes->measurement->unit;
 }


=example

 Executing:
 SELECT
     me.id,
     me.name,
     me.description,
     instruction.id,
     instruction.beverage,
     instruction.instruction,
     recipes.beverage,
     recipes.ingredient,
     recipes.measurement,
     recipes.quantity,
     ingredient.id,
     ingredient.name,
     ingredient.description,
     measurement.id,
     measurement.name,
     measurement.unit 
 FROM
     beverages me  
     JOIN instructions instruction ON instruction.beverage = me.id 
     LEFT JOIN recipes recipes ON recipes.beverage = me.id 
     LEFT JOIN ingredients ingredient ON ingredient.id = recipes.ingredient 
     LEFT JOIN measurements measurement ON measurement.id = recipes.measurement 
 WHERE
     ( me.name = ? ) 
 ORDER BY
     me.id
 Parameters:	'vesper'
 Execution took 0.0021 seconds.


* 1 query gets everything at once

* a little better

=break



* So, what is {{prefetch}}?


 my $beverage_rs = $dbic->resultset('Beverage')->search(
        {},
        {
            **join** => ['instruction',{recipes => 'ingredient'}]
        }
    );


* {{prefetch}} basically {{join}} but keeps columns from joined tables


=example

 Executing:
 SELECT
     me.id,
     me.name,
     me.description,
 FROM
     beverages me  
     JOIN instructions instruction ON instruction.beverage = me.id 
     LEFT JOIN recipes recipes ON recipes.beverage = me.id 
     LEFT JOIN ingredients ingredient ON ingredient.id = recipes.ingredient 
     LEFT JOIN measurements measurement ON measurement.id = recipes.measurement 
 WHERE
     ( me.name = ? ) 
 ORDER BY
     me.id
 Parameters:	'vesper'
 Execution took 0.0021 seconds.









=section #. Other stuff

joins, {{order by}}, {{group by}} 


* DBIC query

 my $filtered_beverages  = $beverage_rs->search(
    {'ingredient.name' => 'vodka'},
    { 
        join => {recipes => 'ingredient'},
        order_by => {-asc => [qw/ingredient.name/]}
    }
 );



* Basic recipe query

 my $beverages = $self->db->resultset('Beverage');

 my $beverage = $beverages->find( { name => 'vespers-martini' } );
 my $recipes  = $beverage->recipes;

 while ( my $recipe = $recipes->next ) {
     my $ingredient  = $recipe->ingredient;
     my $measurement = $recipe->measurement;
     # do stuff with data
 }



=break

* Go to app




